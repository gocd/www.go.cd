---
layout: post
title: "[Action needed] [Patch available] Vulnerability in GoCD - Java deserialization and Apache commons-collections"
status: public
type: post
published: true
author: GoCD Team
---

This post contains information about a security patch available for GoCD 15.2 (and soon, earlier versions). If you're using GoCD 15.2 in production, and especially if it is available over the internet, it is highly recommended to apply this patch immediately.

[Any updates to this post are available starting [here](#updates)]

### What is the vulnerability?

As a part of AppSecCali 2015, a [talk](http://www.securitytube.net/video/13271) highlighted a
[vulnerability](http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/)
using Java deserialization with Apache commons-collections, a very commonly used library in Java-based
applications. Though the talk focused on other applications, GoCD is affected too.


### Impact:

This is a potentially serious issue and applying the patch is recommended, since it is a remote code execution
vulnerability in Java deserialization (exploited using Apache commons-collections).

The impact is reduced a bit, because as far as we are able to determine, this attack on the server is possible only by
having the authentication certificate of an already-registered and enabled Go Agent, because of the way the GoCD Server
and GoCD Agent communicate using a secure connection.

So, even if you have a GoCD server exposed to the internet, you're not immediately vulnerable, as far as we have been
able to determine (and we have given it a lot of thought).


### Risks of applying this patch:

This patch removes the known vector for this attack, as recommended by the vulnerability report. But, given the urgency,
this patch hasn't been extensively tested. There is a small potential for the Go Server to fail. However, given that the
patch is just a replaced JAR file, you can replace the original JAR file, if that happens and contact us on the
[GoCD community mailing list](https://groups.google.com/d/topic/go-cd/DIj1RjQRuMo/discussion) or at support@thoughtworks.com (if you need a private way to reach some of the committers).

We have been using this patch on https://build.go.cd and it has been fine. We will update this post if anything new is
found.


### Risks of not applying this patch:

The GoCD server will be open to arbitrary remote code execution from anyone who has access to a *registered* Go Agent (or
the agent.jks file of such an agent). This is true of an agent which was once registered and then disabled as well.


### How do I apply this patch?

You can download the patch for 15.2.0 from here: `https://download.go.cd/local/patches/15.2.0-2015_11_09/go.jar`

Its checksums are:

SHA256 sum: `eecee2b04c9bd46e74c5c999585683daf164fe41b39151dfcc3f0642561fd4c5`

MD5 sum: `0872e4eefceaaf842a69d8b55ec6a2d0`

The JAR file above is also signed using the usual key used to sign the RPM and DEB installers. The signature file is
available here: `https://download.go.cd/local/patches/15.2.0-2015_11_09/go.jar.asc`

The public key is available on [MIT PGP Public Key Server](http://pgp.mit.edu/pks/lookup?search=0x9149B0A6173454C7&op=index) and
[GoCD's bintray page](https://bintray.com/gocd).

When verified, you'll see that it is signed by the GoCD team:

```
$ gpg --verify go.jar.asc go.jar
gpg: Signature made Mon Nov  9 12:13:21 2015 EST
gpg:                using RSA key 0x9149B0A6173454C7
gpg: Good signature from "Go CD (GPG key for signing bintray downloads) <go-cd@googlegroups.com>" [full]
Primary key fingerprint: 9A43 9A18 CBD0 7C3F F81B  CE75 9149 B0A6 1734 54C7
```

Steps to apply the patch:

1. Download the appropriate go.jar file mentioned above and verify its checksums.

2. Find out the location of your go.jar file and take a backup. On different ways of installation of Go, this can be in different places:
    - On Windows: It is usually in `C:\Program Files (x86)\Go Server\go.jar`
    - On Debian and RPM based installations: It is usually in `/usr/share/go-server/go.jar`
    - On zip installers: It is in the base directory where you start the Go Server from.

3. Now that you have a backup of go.jar, replace it with the one you downloaded.

4. Restart the Go Server.

All of your agents will now fetch the new agent JAR as well, and restart themselves. Depending on the number of agents
you have, this might take a little while (same as an upgrade of the Go Server).


### I don't trust you. How do I generate this patched go.jar myself?

Glad you asked. This patch has been generated by using this script, written by the GoCD Team. You can verify it yourself
and run it. The final checksums will not match because the process of zipping it will include timestamps and our
timestamp in the patched go.jar points to sometime on Saturday, Nov 7.

```
#!/bin/bash

backup_file="go.backup.$(date +%s).for-commons-collections-exploit.jar"
log_file="go.jar.for-commons-collections-exploit.log"

echo "Logs will be in: $log_file"
exec >"$log_file" 2>&1

set -x -e -o pipefail
cd "$(dirname "$0")"

cp go.jar "$backup_file"
unzip -d go-jar go.jar

(cd go-jar/defaultFiles/; unzip -d cruise-war cruise.war)
zip -d go-jar/defaultFiles/cruise-war/WEB-INF/lib/commons-collections-3.1.jar \
    org/apache/commons/collections/functors/InvokerTransformer.class
(cd go-jar/defaultFiles/cruise-war; zip -f ../cruise.war WEB-INF/lib/commons-collections-3.1.jar)

(cd go-jar/defaultFiles/; unzip -d agent-jar agent.jar)
zip -d go-jar/defaultFiles/agent-jar/lib/commons-collections-3.2.jar \
    org/apache/commons/collections/functors/InvokerTransformer.class
(cd go-jar/defaultFiles/agent-jar; zip -f ../agent.jar lib/commons-collections-3.2.jar)

(cd go-jar; zip -f ../go.jar defaultFiles/cruise.war)
(cd go-jar; zip -f ../go.jar defaultFiles/agent.jar)

rm -rf go-jar

diff <(unzip -lv go.jar) <(unzip -lv "$backup_file") || true
```

**Note**: This post will be updated with more information, as we find it and with information about patches for older, supported
installers. If you need help, please email the [GoCD community mailing list](https://groups.google.com/d/topic/go-cd/DIj1RjQRuMo/discussion)
or for a private channel, support@thoughtworks.com.

<a name="updates"></a>
### Updates:

#### Update 1: 9th Nov, 2015 - 1830 EST

This patch fixes one of the known vectors, but there could be one other, TemplatesImpl, which *might* be vulnerable. From an early analysis, it doesn't seem to be, since it has some security and expects a JDK property to be set, before it is used. If we find more about it, this post will be updated. Even if it is vulnerable, there might not be much that can be done, because that is a class provided by the Java Runtime Environment itself. The long-term fix for issues such as this is to move away from Java serialization.

See these articles for more information:
  - [InfoQ: Remotely Exploitable Java Zero Day Exploits through Deserialization](http://www.infoq.com/news/2015/11/commons-exploit)
  - [The Java Deserialization Bug](http://fishbowl.pastiche.org/2015/11/09/java_serialization_bug/)

#### Update 2: 10th Nov, 2015 - 11:30 IST

If you prefer a less intrusive approach we suggest using
[Invoker Defender](https://github.com/gocd/invoker-defender) to
plug this vulnerability. This has been tested on GoCD 14.3+ and should
work on Java 1.6+

Steps to run GoCD server with the [Invoker
Defender](https://github.com/gocd/invoker-defender) java agent

*For Linux (if you are using the standard installers)*

* As the go user download [Invoker Defender] jar file to
```/var/lib/go-server```

```
$ cd /var/lib/go-server
$ wget https://download.go.cd/gocd/invoker-defender-0.1.jar
$ md5sum invoker-defender-0.1.jar
2a88652e68375548ac4fc1c0ce115c41  invoker-defender-0.1.jar

```

* Edit the ```/etc/default/go-server``` and append the following lines

```
GO_SERVER_SYSTEM_PROPERTIES="$GO_SERVER_SYSTEM_PROPERTIES -javaagent:$SERVER_WORK_DIR/invoker-defender-0.1.jar"
export GO_SERVER_SYSTEM_PROPERTIES
```
* Restart GoCD server

---
*For Windows (if you are using the standard installers)*

* Download the
[Invoker Defender](https://download.go.cd/gocd/invoker-defender-0.1.jar)
jar file to ```C:\Program Files\Go Server``` (this is the default
install location)
* Verify the md5 to ```2a88652e68375548ac4fc1c0ce115c41```
* Append the following to the
[wrapper-properties.conf](http://www.go.cd/documentation/user/current/installation/install/server/windows.html#overriding-default-startup-arguments-and-environment)
(if it's the 3rd additional jvm argument)

```
wrapper.java.additional.3=-javaagent:<pathto>\invoker-defender-0.1.jar
```
* Restart GoCD server

---

*For Zip installers*

* Download the
[Invoker Defender](https://download.go.cd/gocd/invoker-defender-0.1.jar)
to where you extracted the zip installer.
* Verify the md5 to ```2a88652e68375548ac4fc1c0ce115c41```
* Modify the ```server.sh``` or ```start-server.bat``` add the
following JVM argument
```
-javaagent:invoker-defender-0.1.jar
```
* Restart GoCD server

---
